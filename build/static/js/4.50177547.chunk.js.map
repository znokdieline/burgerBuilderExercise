{"version":3,"sources":["containers/Auth/Auth.js","components/UI/input/Input.js"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangeHandler","event","controlName","updateControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMassage","error","message","authRedirect","isAuthenticated","to","className","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","mail","isSignup","actions","Input","inputElement","inputClasses","join","onChange","options","option","displayValue","validationError","valueType","label"],"mappings":"0UAWMA,E,4MACFC,MAAQ,CACJC,SAAU,CACNC,MAAO,CACHC,YAAa,QACbC,cAAe,CACXC,KAAM,QACNC,YAAa,gBAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVC,SAAS,GAEbC,OAAO,EACPC,SAAS,GAEbC,SAAU,CACNV,YAAa,QACbC,cAAe,CACXC,KAAM,WACNC,YAAa,YAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVK,UAAW,GAEfH,OAAO,EACPC,SAAS,IAGjBG,UAAU,G,EAWdC,mBAAqB,SAACC,EAAOC,GACzB,IAAMC,EAAiBC,YAAa,EAAKpB,MAAMC,SAAZ,eAC9BiB,EAAcE,YAAa,EAAKpB,MAAMC,SAASiB,GAAc,CAC1DX,MAAOU,EAAMI,OAAOd,MACpBI,MAAOW,YAAcL,EAAMI,OAAOd,MAAO,EAAKP,MAAMC,SAASiB,GAAaV,YAC1EI,SAAS,MAGjB,EAAKW,SAAS,CAAEtB,SAAUkB,K,EAG9BK,cAAgB,SAACP,GACbA,EAAMQ,iBACN,EAAKC,MAAMC,OAAO,EAAK3B,MAAMC,SAASC,MAAMK,MAAO,EAAKP,MAAMC,SAASY,SAASN,MAAO,EAAKP,MAAMe,W,EAGtGa,sBAAwB,WACpB,EAAKL,UAAS,SAAAM,GACV,MAAO,CAAEd,UAAWc,EAAUd,c,kEAzB7Be,KAAKJ,MAAMK,gBAAkD,MAAhCD,KAAKJ,MAAMM,kBACzCF,KAAKJ,MAAMO,0B,+BA4BV,IAAD,OACEC,EAAoB,GAC1B,IAAM,IAAIC,KAAOL,KAAK9B,MAAMC,SACxBiC,EAAkBE,KAAK,CACnBC,GAAIF,EACJG,OAAQR,KAAK9B,MAAMC,SAASkC,KAIpC,IAAII,EAAOL,EAAkBM,KAAI,SAAAC,GAAW,OACxC,kBAAC,IAAD,CACIN,IAAKM,EAAYJ,GACjBlC,YAAasC,EAAYH,OAAOnC,YAChCC,cAAeqC,EAAYH,OAAOlC,cAClCG,MAAOkC,EAAYH,OAAO/B,MAC1BmC,SAAUD,EAAYH,OAAO3B,MAC7BgC,eAAgBF,EAAYH,OAAO9B,WACnCI,QAAS6B,EAAYH,OAAO1B,QAC5BgC,QAAS,SAAC3B,GAAD,OAAW,EAAKD,mBAAmBC,EAAOwB,EAAYJ,UAGpEP,KAAKJ,MAAMmB,UACVN,EAAO,kBAAC,IAAD,OAGX,IAAIO,EAAe,KAEhBhB,KAAKJ,MAAMqB,QACVD,EACI,2BAAIhB,KAAKJ,MAAMqB,MAAMC,UAI7B,IAAIC,EAAe,KAKnB,OAJGnB,KAAKJ,MAAMwB,kBACVD,EAAe,kBAAC,IAAD,CAAUE,GAAIrB,KAAKJ,MAAMM,oBAIxC,yBAAKoB,UAAU,QACVH,EACAH,EACD,0BAAMO,SAAUvB,KAAKN,eACfe,EACF,kBAAC,IAAD,CAAQe,QAAQ,WAAhB,WAEJ,kBAAC,IAAD,CACIA,QAAQ,SACRC,QAASzB,KAAKF,uBAFlB,aAGYE,KAAK9B,MAAMe,SAAW,SAAW,e,GAlH1CyC,aAyIJC,uBAjBS,SAAAzD,GACpB,MAAO,CACH6C,QAAS7C,EAAM0D,KAAKb,QACpBE,MAAO/C,EAAM0D,KAAKX,MAClBG,gBAAsC,OAArBlD,EAAM0D,KAAKC,MAC5B5B,eAAgB/B,EAAM4D,cAAcC,SACpC7B,iBAAkBhC,EAAM0D,KAAK1B,qBAIV,SAAA8B,GACvB,MAAO,CACHnC,OAAQ,SAACoC,EAAMlD,EAAUmD,GAAjB,OAA+BF,EAASG,IAAcF,EAAMlD,EAAUmD,KAC9E/B,sBAAuB,kBAAM6B,EAASG,IAA4B,UAI3DR,CAA6C1D,I,gCCpJ5D,0BAiEemE,IA7DD,SAAExC,GACZ,IAAIyC,EAAe,KACfC,EAAe,CAAC,gBAMpB,OAJI1C,EAAMgB,SAAWhB,EAAMiB,gBAAkBjB,EAAMd,SAC/CwD,EAAahC,KAAK,WAGdV,EAAMvB,aACV,IAAM,QACNgE,EAAe,yCACXf,UAAWgB,EAAaC,KAAK,MACzB3C,EAAMtB,cAFC,CAGXG,MAAOmB,EAAMnB,MACb+D,SAAU5C,EAAMkB,WACpB,MACA,IAAM,WACFuB,EAAe,4CACXf,UAAW,gBACP1B,EAAMtB,cAFC,CAGXG,MAAOmB,EAAMnB,MACb+D,SAAU5C,EAAMkB,WACpB,MACJ,IAAM,SACFuB,EACA,4BACIf,UAAW,eACX7C,MAAOmB,EAAMnB,MACb+D,SAAU5C,EAAMkB,SACflB,EAAMtB,cAAcmE,QAAQ/B,KAAI,SAAAgC,GAAM,OACnC,4BACIrC,IAAKqC,EAAOjE,MACZA,MAAOiE,EAAOjE,OACbiE,EAAOC,kBAIpB,MACJ,QACIN,EAAe,yCACXf,UAAW,gBACP1B,EAAMtB,cAFC,CAGXG,MAAOmB,EAAMnB,MACb+D,SAAU5C,EAAMkB,WAI5B,IAAI8B,EAAkB,KAKtB,OAJIhD,EAAMf,OAASe,EAAMd,UACrB8D,EAAkB,uBAAGtB,UAAW,mBAAd,wBAAuD1B,EAAMiD,YAI/E,yBAAKvB,UAAW,SACZ,2BAAOA,UAAW,SAAU1B,EAAMkD,OACjCT,EACAO,K","file":"static/js/4.50177547.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport './Auth.css';\nimport * as actions from '../../Store/Actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false \n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false \n            }\n        },\n        isSignUp: true\n    };\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirectPath();\n        }\n    };\n\n    \n\n    inputChangeHandler = (event, controlName) => {\n        const updateControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        });\n        this.setState({ controls: updateControls })\n    };\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\n    };\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignUp: !prevState.isSignUp }\n        })\n    };\n\n    render(){\n        const formElementsArray = [];\n        for ( let key in this.state.controls ){\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        };\n        //rendereo dinamico del los elementos del form\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangeHandler(event, formElement.id) }\n            />\n        ));\n        if(this.props.loading){\n            form = <Spinner/>\n        };\n\n        let errorMassage = null;\n\n        if(this.props.error) {\n            errorMassage = (\n                <p>{this.props.error.message}</p>\n            )\n        };\n\n        let authRedirect = null\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\n        }\n\n        return (\n            <div className=\"Auth\">\n                {authRedirect}\n                {errorMassage}\n                <form onSubmit={this.submitHandler}>\n                    { form }\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                    btnType=\"Danger\"\n                    clicked={this.switchAuthModeHandler}\n                >SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    };\n};\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (mail, password, isSignup ) => dispatch(actions.auth( mail, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\n\nimport './input.css';\n\nconst Input = ( props ) => {\n    let inputElement = null;\n    let inputClasses = ['InputElement'];\n\n    if( props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push('Invalid')\n    }\n\n    switch (props.elementType){\n        case( 'input' ):\n        inputElement = <input \n            className={inputClasses.join(' ')}\n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed} />;\n        break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={'InputElement'}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n            break;\n        case ('select'):\n            inputElement = (\n            <select\n                className={'InputElement'}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(option => (\n                    <option\n                        key={option.value}\n                        value={option.value}>\n                        {option.displayValue}\n                    </option>\n                ))}\n            </select>);\n            break;\n        default:\n            inputElement = <input \n                className={'InputElement'}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n    };\n\n    let validationError = null\n    if( props.valid && props.touched ) {\n        validationError = <p className={'ValidationError'}>Enter a valid Value! {props.valueType}</p>\n    };\n    \n    return (\n        <div className={'Input'}>\n            <label className={'Label'}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    )\n};\n\nexport default Input;"],"sourceRoot":""}