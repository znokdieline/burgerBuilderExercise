{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js.js","containers/CheckOut/ContacData/ContactData.js","containers/CheckOut/Checkout.js","components/UI/input/Input.js"],"names":["CheckoutSummary","props","className","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","Value","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangeHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disable","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchaseRedirect","purchased","path","match","component","inputElement","inputClasses","join","onChange","option","validationError","valueType","label"],"mappings":"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","file":"static/js/3.03e1d4c3.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CheckoutSummary.css'\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\n\nconst CheckoutSummary = ( props ) => {\n    return (\n        <div className=\"CheckoutSummary\">\n            <h1>We hope it tastes well!!</h1>\n            <div style={{ width: '100%', margin: 'auto' }} >\n                <Burger ingredients={ props.ingredients }/>\n                <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}\n                > CANCEL </Button>\n                <Button \n                btnType=\"Success\"\n                clicked={props.checkoutContinued}\n                > CONTINUE </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default CheckoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport './ContactData.css';\nimport axios from '../../../Axios-order';\nimport Input from '../../../components/UI/input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../Store/Actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component{\n    state={\n        orderForm:{\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false \n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Zip Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                Value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your mail'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false  \n    };\n\n    orderHandler = (event) => {\n        event.preventDefault();//previene que se reacrge la pagina mietras se hace e update de los campos \n        const formData = {};\n        for(let formElementIdentifier in this.state.orderForm){\n            //el formElemenIndentifier es email contry etc. = a el valor que el usuario le ponga. \n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {   \n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n        this.props.onOrderBurger(order, this.props.token);\n    }\n    \n\n    inputChangeHandler = (event,inputIdentifier) => {\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid:checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        }); \n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement \n        });\n\n        let formIsValid = true;\n\n        for(let inputIdentifier in updatedOrderForm){\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid  }) // formIsValid: formIsValid izquierda refiere a el estado y derecha a la variable\n                                                \n    }\n    render(){\n        const formElementsArray = [];\n        for ( let key in this.state.orderForm ){\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n            { formElementsArray.map(formElement => (\n                <Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => this.inputChangeHandler(event, formElement.id) }\n                    />\n            ) ) }\n            <Button btnType=\"Success\" disable={!this.state.formIsValid} >ORDER</Button>\n        </form>\n        );\n        if(this.props.loading){\n            form = <Spinner/>\n        }\n\n        return(\n            <div className=\"ContactData\">\n                <h4> Enter your Contact Data</h4>\n               {form}\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\nexport default connect( mapStateToProps, mapDispatchToProps )(withErrorHandler(ContactData, axios));","import React, { Component } from  'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary.js.js';\nimport ContactData from '../../containers/CheckOut/ContacData/ContactData';\n\nclass Checkout extends Component {\n  \n      \n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n        //accede a los props, al prop history y se le indica regresar al builder.\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data')\n        // ingresa al los props, al prop history y se rempleza por el siguiente componente.\n    };\n\n    render(){\n        let summary = <Redirect to=\"/\"/>;\n        if (this.props.ings) {\n            const purchaseRedirect = this.props.purchased ? <Redirect to= \"/\"/> : null\n            summary = (\n                <div>\n                    {purchaseRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={ this.checkoutCancelledHandler }\n                        checkoutContinued={ this.checkoutContinuedHandler }\n                        />\n                    <Route \n                        path={ this.props.match.path + '/contact-data' } \n                        component={ContactData}/>\n                </div>\n            )\n        }\n        return summary;\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n};\n\n\n\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\n\nimport './input.css';\n\nconst Input = ( props ) => {\n    let inputElement = null;\n    let inputClasses = ['InputElement'];\n\n    if( props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push('Invalid')\n    }\n\n    switch (props.elementType){\n        case( 'input' ):\n        inputElement = <input \n            className={inputClasses.join(' ')}\n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed} />;\n        break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={'InputElement'}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n            break;\n        case ('select'):\n            inputElement = (\n            <select\n                className={'InputElement'}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(option => (\n                    <option\n                        key={option.value}\n                        value={option.value}>\n                        {option.displayValue}\n                    </option>\n                ))}\n            </select>);\n            break;\n        default:\n            inputElement = <input \n                className={'InputElement'}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n    };\n\n    let validationError = null\n    if( props.valid && props.touched ) {\n        validationError = <p className={'ValidationError'}>Enter a valid Value! {props.valueType}</p>\n    };\n    \n    return (\n        <div className={'Input'}>\n            <label className={'Label'}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    )\n};\n\nexport default Input;"],"sourceRoot":""}